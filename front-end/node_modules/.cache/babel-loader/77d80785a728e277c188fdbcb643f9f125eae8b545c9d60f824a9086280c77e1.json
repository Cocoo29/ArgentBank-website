{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOGIN_SUCCESS, USER_LOGIN_FAIL, USER_LOGOUT, USER_PROFILE_SUCCESS, USER_PROFILE_FAIL, USER_PROFILE_RESET, USER_PROFILE_UPDATE, USER_PROFILE_UPDATE_FAIL } from '../constants/actions';\nimport { API_BASE_URL } from '../constants/url';\nconst baseUrl = API_BASE_URL;\n\n// Action de connexion\nexport const login = (email, password) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-type': 'application/json'\n      }\n    };\n    const {\n      data\n    } = await axios.post(`${baseUrl}user/login`, {\n      email,\n      password\n    }, config);\n    dispatch(loginSuccess(data));\n    dispatch(userProfile(data.body.token));\n  } catch (error) {\n    console.log('Error in login:', error);\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Action de succès de connexion\nexport const loginSuccess = data => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: data\n});\n\n// Action de déconnexion\nexport const logout = navigate => async dispatch => {\n  try {\n    dispatch(userLogout());\n    dispatch(userProfileReset());\n\n    // Redirection vers la page de login après déconnexion\n    navigate('/loginForm');\n  } catch (error) {\n    console.error('Error in logout:', error);\n  }\n};\n\n// Action de déconnexion de l'utilisateur\nexport const userLogout = () => ({\n  type: USER_LOGOUT\n});\n\n// Action de réinitialisation du profil utilisateur\nexport const userProfileReset = () => ({\n  type: USER_PROFILE_RESET\n});\n\n// Action de profil utilisateur réussie\nexport const userProfile = token => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.post(`${baseUrl}user/profile`, {\n      token\n    }, getConfig(token));\n    dispatch({\n      type: USER_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch(handleError(USER_PROFILE_FAIL, error));\n  }\n};\n\n// Action de mise à jour du profil utilisateur\nexport const updateProfile = (token, newFirstName, newLastName) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axios.put(`${baseUrl}user/profile`, {\n      firstName: newFirstName,\n      lastName: newLastName\n    }, getConfig(token));\n    dispatch(userProfileUpdate(data));\n  } catch (error) {\n    dispatch(handleError(USER_PROFILE_UPDATE_FAIL, error));\n  }\n};\n\n// Action de mise à jour du profil utilisateur réussie\nexport const userProfileUpdate = data => ({\n  type: USER_PROFILE_UPDATE,\n  payload: data\n});\n\n// Fonction pour gérer les erreurs\nconst handleError = (type, error) => ({\n  type,\n  payload: error.response && error.response.data.message ? error.response.data.message : error.message\n});\n\n// Fonction pour obtenir la configuration avec le token d'authentification\nconst getConfig = token => ({\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`\n  }\n});","map":{"version":3,"names":["axios","USER_LOGIN_SUCCESS","USER_LOGIN_FAIL","USER_LOGOUT","USER_PROFILE_SUCCESS","USER_PROFILE_FAIL","USER_PROFILE_RESET","USER_PROFILE_UPDATE","USER_PROFILE_UPDATE_FAIL","API_BASE_URL","baseUrl","login","email","password","dispatch","config","headers","data","post","loginSuccess","userProfile","body","token","error","console","log","type","payload","response","message","logout","navigate","userLogout","userProfileReset","getConfig","handleError","updateProfile","newFirstName","newLastName","put","firstName","lastName","userProfileUpdate","Authorization"],"sources":["/home/utilisateur/Bureau/ArgentBank-website/front-end/src/actions/actions.js"],"sourcesContent":["import axios from 'axios';\nimport {\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAIL,\n  USER_LOGOUT,\n  USER_PROFILE_SUCCESS,\n  USER_PROFILE_FAIL,\n  USER_PROFILE_RESET,\n  USER_PROFILE_UPDATE,\n  USER_PROFILE_UPDATE_FAIL,\n} from '../constants/actions';\nimport { API_BASE_URL } from '../constants/url';\n\nconst baseUrl = API_BASE_URL;\n\n// Action de connexion\nexport const login = (email, password) => async (dispatch) => {\n  try {\n    const config = {\n      headers: {\n        'Content-type': 'application/json',\n      },\n    };\n\n    const { data } = await axios.post(\n      `${baseUrl}user/login`,\n      { email, password },\n      config\n    );\n\n    dispatch(loginSuccess(data));\n    dispatch(userProfile(data.body.token));\n  } catch (error) {\n    console.log('Error in login:', error);\n    dispatch({\n      type: USER_LOGIN_FAIL,\n      payload:\n        error.response && error.response.data.message\n          ? error.response.data.message\n          : error.message,\n    });\n  }\n};\n\n// Action de succès de connexion\nexport const loginSuccess = (data) => ({\n  type: USER_LOGIN_SUCCESS,\n  payload: data,\n});\n\n// Action de déconnexion\nexport const logout = (navigate) => async (dispatch) => {\n  try {\n    dispatch(userLogout());\n    dispatch(userProfileReset());\n    \n    // Redirection vers la page de login après déconnexion\n    navigate('/loginForm');\n  } catch (error) {\n    console.error('Error in logout:', error);\n  }\n};\n\n// Action de déconnexion de l'utilisateur\nexport const userLogout = () => ({ type: USER_LOGOUT });\n\n// Action de réinitialisation du profil utilisateur\nexport const userProfileReset = () => ({ type: USER_PROFILE_RESET });\n\n// Action de profil utilisateur réussie\nexport const userProfile = (token) => async (dispatch) => {\n  try {\n    const { data } = await axios.post(\n      `${baseUrl}user/profile`,\n      { token },\n      getConfig(token)\n    );\n    dispatch({ type: USER_PROFILE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch(handleError(USER_PROFILE_FAIL, error));\n  }\n};\n\n// Action de mise à jour du profil utilisateur\nexport const updateProfile = (token, newFirstName, newLastName) => async (\n  dispatch\n) => {\n  try {\n    const { data } = await axios.put(\n      `${baseUrl}user/profile`,\n      { firstName: newFirstName, lastName: newLastName },\n      getConfig(token)\n    );\n    dispatch(userProfileUpdate(data));\n  } catch (error) {\n    dispatch(handleError(USER_PROFILE_UPDATE_FAIL, error));\n  }\n};\n\n// Action de mise à jour du profil utilisateur réussie\nexport const userProfileUpdate = (data) => ({\n  type: USER_PROFILE_UPDATE,\n  payload: data,\n});\n\n// Fonction pour gérer les erreurs\nconst handleError = (type, error) => ({\n  type,\n  payload:\n    error.response && error.response.data.message\n      ? error.response.data.message\n      : error.message,\n});\n\n// Fonction pour obtenir la configuration avec le token d'authentification\nconst getConfig = (token) => ({\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}