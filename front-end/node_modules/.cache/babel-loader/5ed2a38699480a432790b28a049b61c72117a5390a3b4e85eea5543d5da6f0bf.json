{"ast":null,"code":"var _jsxFileName = \"/home/utilisateur/Bureau/ArgentBank-website/front-end/src/components/UserHeader/header.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateProfile } from '../../actions/actions';\nimport './header.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UserHeader() {\n  _s();\n  const dispatch = useDispatch();\n\n  // Extrait les valeurs du profil et du jeton du magasin Redux\n  const {\n    firstName,\n    lastName\n  } = useSelector(state => state.userProfile);\n  const {\n    token\n  } = useSelector(state => state.userLogin);\n\n  // Déclare les états locaux pour les nouveaux prénom et nom\n  const [newFirstname, setNewFirstname] = useState(firstName);\n  const [newLastname, setNewLastname] = useState(lastName);\n\n  // Déclare l'état local pour le mode d'édition\n  const [editButton, setEditButton] = useState(false);\n\n  // Gestionnaire de clic sur le bouton \"Edit Name\"\n  const editNameButton = e => {\n    e.preventDefault();\n    setEditButton(true);\n  };\n\n  // Gestionnaire de soumission du formulaire\n  const submitHandler = async e => {\n    e.preventDefault();\n    try {\n      // Dispatch de l'action pour mettre à jour le profil avec les nouvelles valeurs\n      await dispatch(updateProfile(token, newFirstname, newLastname));\n\n      // Mise à jour du pseudo dans le localStorage\n      localStorage.setItem('userPseudo', `${newFirstname} ${newLastname}`);\n\n      // Si la mise à jour réussit, désactiver le mode d'édition\n      setEditButton(false);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      // Gérer les erreurs de mise à jour du profil ici\n    }\n  };\n\n  // Effet pour récupérer le pseudo sauvegardé dans le localStorage lors du chargement initial\n  useEffect(() => {\n    const storedPseudo = localStorage.getItem('userPseudo');\n    if (storedPseudo) {\n      const [storedFirstname, storedLastname] = storedPseudo.split(' ');\n      setNewFirstname(storedFirstname);\n      setNewLastname(storedLastname);\n    }\n  }, []);\n\n  // Défini le message de bienvenue en fonction des nouveaux noms (s'ils ont été modifiés) ou des noms existants\n  const welcomeMessage = editButton ? `Welcome back` : `Welcome back ${newFirstname} ${newLastname}!`;\n\n  // Si le mode d'édition est désactivé, afficher le nom et le prénom actuels\n  if (!editButton) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: welcomeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: editNameButton,\n        className: \"edit-button\",\n        children: \"Edit Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  } else {\n    // Si le mode d'édition est activé, afficher le formulaire d'édition\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: welcomeMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"editNameContent\",\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editNameInputs\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newFirstname\",\n            value: newFirstname,\n            onChange: e => setNewFirstname(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newLastname\",\n            value: newLastname,\n            onChange: e => setNewLastname(e.target.value),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editNameButtons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-button\",\n            type: \"submit\",\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"cancel-button\",\n            onClick: () => setEditButton(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(UserHeader, \"E2E8ikJrGoFmXarZ5H0j3SKe5pM=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = UserHeader;\nexport default UserHeader;\nvar _c;\n$RefreshReg$(_c, \"UserHeader\");","map":{"version":3,"names":["useState","useEffect","useSelector","useDispatch","updateProfile","jsxDEV","_jsxDEV","UserHeader","_s","dispatch","firstName","lastName","state","userProfile","token","userLogin","newFirstname","setNewFirstname","newLastname","setNewLastname","editButton","setEditButton","editNameButton","e","preventDefault","submitHandler","localStorage","setItem","error","console","storedPseudo","getItem","storedFirstname","storedLastname","split","welcomeMessage","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSubmit","type","id","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/utilisateur/Bureau/ArgentBank-website/front-end/src/components/UserHeader/header.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateProfile } from '../../actions/actions';\nimport './header.css';\n\nfunction UserHeader() {\n  const dispatch = useDispatch();\n\n  // Extrait les valeurs du profil et du jeton du magasin Redux\n  const { firstName, lastName } = useSelector((state) => state.userProfile);\n  const { token } = useSelector((state) => state.userLogin);\n\n  // Déclare les états locaux pour les nouveaux prénom et nom\n  const [newFirstname, setNewFirstname] = useState(firstName);\n  const [newLastname, setNewLastname] = useState(lastName);\n\n  // Déclare l'état local pour le mode d'édition\n  const [editButton, setEditButton] = useState(false);\n\n  // Gestionnaire de clic sur le bouton \"Edit Name\"\n  const editNameButton = (e) => {\n    e.preventDefault();\n    setEditButton(true);\n  };\n\n  // Gestionnaire de soumission du formulaire\n  const submitHandler = async (e) => {\n    e.preventDefault();\n    try {\n      // Dispatch de l'action pour mettre à jour le profil avec les nouvelles valeurs\n      await dispatch(updateProfile(token, newFirstname, newLastname));\n\n      // Mise à jour du pseudo dans le localStorage\n      localStorage.setItem('userPseudo', `${newFirstname} ${newLastname}`);\n\n      // Si la mise à jour réussit, désactiver le mode d'édition\n      setEditButton(false);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      // Gérer les erreurs de mise à jour du profil ici\n    }\n  };\n\n  // Effet pour récupérer le pseudo sauvegardé dans le localStorage lors du chargement initial\n  useEffect(() => {\n    const storedPseudo = localStorage.getItem('userPseudo');\n    if (storedPseudo) {\n      const [storedFirstname, storedLastname] = storedPseudo.split(' ');\n      setNewFirstname(storedFirstname);\n      setNewLastname(storedLastname);\n    }\n  }, []);\n\n  // Défini le message de bienvenue en fonction des nouveaux noms (s'ils ont été modifiés) ou des noms existants\n  const welcomeMessage = editButton ? `Welcome back` : `Welcome back ${newFirstname} ${newLastname}!`;\n\n  // Si le mode d'édition est désactivé, afficher le nom et le prénom actuels\n  if (!editButton) {\n    return (\n      <div className=\"header\">\n        <h1>{welcomeMessage}</h1>\n        <button onClick={editNameButton} className=\"edit-button\">\n          Edit Name\n        </button>\n      </div>\n    );\n  } else {\n    // Si le mode d'édition est activé, afficher le formulaire d'édition\n    return (\n      <div className=\"header\">\n        <h1>{welcomeMessage}</h1>\n        <form className=\"editNameContent\" onSubmit={submitHandler}>\n          <div className=\"editNameInputs\">\n            <input\n              type=\"text\"\n              id=\"newFirstname\"\n              value={newFirstname}\n              onChange={(e) => setNewFirstname(e.target.value)}\n              required\n            />\n            <input\n              type=\"text\"\n              id=\"newLastname\"\n              value={newLastname}\n              onChange={(e) => setNewLastname(e.target.value)}\n              required\n            />\n          </div>\n          <div className=\"editNameButtons\">\n            <button className=\"save-button\" type=\"submit\">\n              Save\n            </button>\n            <button className=\"cancel-button\" onClick={() => setEditButton(false)}>\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default UserHeader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}